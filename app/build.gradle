apply plugin: 'com.android.application'


def androidId = rootProject.ext.androidID
android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion
    defaultConfig {
        applicationId applicationID.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //给java代码暴露环境变量
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))

        // 给java工程传递参数,可以动态传递报名，模块名到注解处理器中
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
            }
        }
    }
    buildTypes {
        debug {
            buildConfigField("String", "url", "\"${url.debug}\"")
        }

        release {
            buildConfigField("String", "url", "\"${url.release}\"")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //此处遍历依赖
//    implementation 'androidx.appcompat:appcompat:1.0.2'
//    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    dependencesID.each { k, v ->
//        //也可以通过遍历k来依赖不同的
//        implementation v
//    }

    implementation project(':common')

    // 引入注解
    implementation project(':arouter_annotations')

    // 引入api
    implementation project(':arouter_api')

    // 使用这句话注解处理器才能工作
    annotationProcessor project(':arouter_compiler')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    if (isRelease) {
        implementation project(":login")
        implementation project(":register")
    } else {
        // 每个模块独立运行
    }
}
